//package com.authservice.util;
//
//import com.authservice.model.Client;
//import com.authservice.model.Account;
//import com.authservice.repository.ClientRepository;
//import com.authservice.repository.AccountRepository;
//import com.github.javafaker.Faker;
//import org.springframework.boot.CommandLineRunner;
//import org.springframework.http.HttpEntity;
//import org.springframework.http.HttpHeaders;
//import org.springframework.http.MediaType;
//import org.springframework.stereotype.Component;
//import org.springframework.web.client.RestTemplate;
//
//import java.util.Random;
//import java.util.UUID;
//
//@Component
//public class TestDataInitializer implements CommandLineRunner {
//    private final ClientRepository clientRepository;
//    private final AccountRepository accountRepository;
//    private final Faker faker = new Faker();
//    private final Random random = new Random();
//    private final RestTemplate restTemplate = new RestTemplate();
//
//    public TestDataInitializer(ClientRepository clientRepository, AccountRepository accountRepository) {
//        this.clientRepository = clientRepository;
//        this.accountRepository = accountRepository;
//    }
//
//    @Override
//    public void run(String... args) throws Exception {
//        System.out.println("üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
//
//        for (int i = 0; i < 10; i++) {
//            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
//            String fullName = faker.name().fullName();
//            String phone = "+79" + (random.nextInt(900000000) + 100000000);
//            String username = "user" + (i + 1);
//            String password = "pass" + (i + 1);
//
//            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
//            Client client = new Client(fullName, phone, username, password);
//            clientRepository.save(client);
//            System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç: " + fullName + " (" + phone + ") | –õ–æ–≥–∏–Ω: " + username + ", –ü–∞—Ä–æ–ª—å: " + password);
//
//            // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ (–æ—Ç 1 –¥–æ 3)
//            int accountCount = random.nextInt(3) + 1;
//            for (int j = 0; j < accountCount; j++) {
//                Account account = new Account();
//                account.setClient(client);
//                account.setBalance(random.nextInt(9000) + 1000.0); // –ë–∞–ª–∞–Ω—Å –æ—Ç 1000 –¥–æ 10000
//                account.setAccountNumber(UUID.randomUUID().toString());
//                account.setCardNumber("4000" + (random.nextInt(9000) + 1000)); // –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
//                accountRepository.save(account);
//                client.getAccounts().add(account);
//                System.out.println("  ‚ûï –°—á–µ—Ç: " + account.getAccountNumber() + " | –ö–∞—Ä—Ç–∞: " + account.getCardNumber() + " | –ë–∞–ª–∞–Ω—Å: " + account.getBalance() + "‚ÇΩ");
//            }
//
//            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏
//            clientRepository.save(client);
//
//            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç /auth/register
//            String url = "http://localhost:8081/auth/register";
//            HttpHeaders headers = new HttpHeaders();
//            headers.setContentType(MediaType.APPLICATION_JSON);
//
//            HttpEntity<Client> request = new HttpEntity<>(client, headers);
//
//            try {
//                restTemplate.postForObject(url, request, Client.class);
//                System.out.println("üì§ –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ auth-service —á–µ—Ä–µ–∑ /auth/register");
//            } catch (Exception e) {
//                System.out.println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ auth-service: " + e.getMessage());
//            }
//        }
//
//        System.out.println("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
//    }
//}
