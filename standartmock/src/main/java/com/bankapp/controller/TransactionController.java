package com.bankapp.controller;

import com.bankapp.model.Account;
import com.bankapp.model.Client;
//import com.bankapp.repository.ClientRepository;
//import com.bankapp.util.SessionManager;
import com.bankapp.repository.ClientRepository;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/transactions")
public class TransactionController {
//    private final SessionManager sessionManager;
    private Client recipientClient;
    private Account recipientAccount;
    private final RestTemplate restTemplate;

    public TransactionController(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }


    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
    @GetMapping("/clients")
    public List<Client> getAllClients() {
        return List.copyOf(ClientRepository.getAllClients());
//        return restTemplate.getForObject("http://localhost:8081/clients", List.class);
    }

    // 2Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –Ω–æ–º–µ—Ä—É —Å—á–µ—Ç–∞
    @PostMapping("/select-recipient")
    public String selectRecipient(@RequestParam String username, @RequestParam String accountNumber) {
        String res = restTemplate.getForObject("http://localhost:8081/auth/isLogged", String.class);
        if (res.equals("–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")) {
            return "‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!";
        }
        if (!res.equals("–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")) {
            return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–∑–∂–µ";
        }
//        Optional<Client> recipientOpt = ClientRepository.findByUsername(username);
        Client clientFromAuthServer = restTemplate.getForObject("http://localhost:8081/client/" + username, Client.class);
        if (clientFromAuthServer == null) {
            return "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! 47";
        }
        System.out.println(username);
        System.out.println(clientFromAuthServer);
        Optional<Client> recipientOpt = ClientRepository.findById(clientFromAuthServer.getId());
        System.out.println(recipientOpt.get());
        if (recipientOpt.isEmpty()) {
            return "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! 52";
        }

        Client client = recipientOpt.get();

        Optional<Account> recipientAccountOpt = client.getAccounts()
                .stream()
                .filter(a -> a.getAccountNumber().equals(accountNumber))
                .findFirst();

        if (recipientAccountOpt.isEmpty()) {
            return "‚ùå –û—à–∏–±–∫–∞: –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞!";
        }

        this.recipientClient = client;
        this.recipientAccount = recipientAccountOpt.get();

        return "‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω: " + recipientClient.getFullName() + " (–°—á–µ—Ç: " + recipientAccount.getAccountNumber() + ")";
    }

    // 3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ (—É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å)
    @PostMapping("/transfer")
    public String transfer(@RequestParam double amount) {
//        if (!sessionManager.isLoggedIn()) {
//            return "‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!";
//        }
        String authStatus = restTemplate.getForObject("http://localhost:8081/auth/isLogged", String.class);
        if (authStatus.equals("–Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")) {
            return "‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!";
        }

        if (recipientClient == null || recipientAccount == null) {
            return "‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!";
        }

//        Client sender = sessionManager.getLoggedInClient();

        Client senderFromAuthServer = restTemplate.getForObject("http://localhost:8081/auth/currentClient", Client.class);
        if (senderFromAuthServer == null) {
            return "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!";
        }

        Optional<Client> senderOpt = ClientRepository.findById(senderFromAuthServer.getId());
        if (senderOpt.isEmpty()) {
            return "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!";
        }

        Client sender = senderOpt.get();

        Optional<Account> senderAccountOpt = sender.getAccounts().stream().findFirst();
        if (senderAccountOpt.isEmpty()) {
            return "‚ùå –û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç —Å—á–µ—Ç–∞!";
        }

        Account senderAccount = senderAccountOpt.get();

        if (senderAccount.getBalance() < amount) {
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ!";
        }



        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        System.out.println("üí∏ –ü–µ—Ä–µ–≤–æ–¥ " + amount + "‚ÇΩ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ " + senderAccount.getAccountNumber()
                + " –∫ –∞–∫–∫–∞—É–Ω—Ç—É " + recipientAccount.getAccountNumber());

        System.out.println("üìä –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –î–û: " + senderAccount.getBalance() + "‚ÇΩ");
        System.out.println("üìä –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –î–û: " + recipientAccount.getBalance() + "‚ÇΩ");

        senderAccount.setBalance(senderAccount.getBalance() - amount);
        recipientAccount.setBalance(recipientAccount.getBalance() + amount);

        System.out.println("‚úÖ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ü–û–°–õ–ï: " + senderAccount.getBalance() + "‚ÇΩ");
        System.out.println("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ü–û–°–õ–ï: " + recipientAccount.getBalance() + "‚ÇΩ");


        return "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! " + amount + "‚ÇΩ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —Å—á–µ—Ç " + recipientAccount.getAccountNumber();
    }
}